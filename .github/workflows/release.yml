name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-linux:
    name: build linux-amd64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'
          cache: true

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: "Build amd64 + arm64 + arm"
        shell: bash
        run: |
          mkdir -p dist
          VERSION="${GITHUB_REF_NAME:-dev}"
          # linux/amd64
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_linux_amd64.bin" ./cmd/f2p
          BASE="f2p_${VERSION}_linux_amd64"
          mkdir -p "dist/${BASE}"
          mv "dist/f2p_${VERSION}_linux_amd64.bin" "dist/${BASE}/f2p"
          cp LICENSE README.md "dist/${BASE}/" 2>/dev/null || true
          tar -C dist -czf "dist/${BASE}.tar.gz" "${BASE}"
          rm -rf "dist/${BASE}"

          # linux/arm64
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_linux_arm64.bin" ./cmd/f2p
          BASE="f2p_${VERSION}_linux_arm64"
          mkdir -p "dist/${BASE}"
          mv "dist/f2p_${VERSION}_linux_arm64.bin" "dist/${BASE}/f2p"
          cp LICENSE README.md "dist/${BASE}/" 2>/dev/null || true
          tar -C dist -czf "dist/${BASE}.tar.gz" "${BASE}"
          rm -rf "dist/${BASE}"

          # linux/arm
          CC=arm-linux-gnueabihf-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_linux_armv7.bin" ./cmd/f2p
          BASE="f2p_${VERSION}_linux_armv7"
          mkdir -p "dist/${BASE}"
          mv "dist/f2p_${VERSION}_linux_armv7.bin" "dist/${BASE}/f2p"
          cp LICENSE README.md "dist/${BASE}/" 2>/dev/null || true
          tar -C dist -czf "dist/${BASE}.tar.gz" "${BASE}"
          rm -rf "dist/${BASE}"

      - name: Upload artifacts (linux)
        uses: actions/upload-artifact@v4
        with:
          name: f2p_linux
          path: |
            dist/*linux_amd64.tar.gz
            dist/*linux_arm64.tar.gz
            dist/*linux_armv7.tar.gz
          if-no-files-found: error

  build-windows:
    name: build windows-amd64 Mingw64
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'
          cache: true

      - name: Install MSYS2 and mingw-w64
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc

      - name: Add mingw64 to PATH
        shell: bash
        run: echo "C:/msys64/mingw64/bin" >> "$GITHUB_PATH"

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          VERSION="${GITHUB_REF_NAME:-dev}"
          CC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 GOOS=windows GOARCH=amd64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_windows_amd64.exe" ./cmd/f2p

      - name: Compress (zip)
        shell: pwsh
        run: |
          $version = "$env:GITHUB_REF_NAME"
          if ([string]::IsNullOrWhiteSpace($version)) { $version = "dev" }
          $base = "f2p_${version}_windows_amd64"
          New-Item -ItemType Directory -Force -Path "dist/$base" | Out-Null
          Move-Item "dist/f2p_${version}_windows_amd64.exe" "dist/$base/f2p.exe"
          if (Test-Path LICENSE) { Copy-Item LICENSE "dist/$base/" }
          if (Test-Path README.md) { Copy-Item README.md "dist/$base/" }
          Compress-Archive -Path "dist/$base/*" -DestinationPath "dist/$base.zip" -Force
          Remove-Item -Recurse -Force "dist/$base"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: f2p_windows_amd64
          path: dist/*.zip
          if-no-files-found: error

  release:
    name: publish release
    needs:
      - build-linux
      - build-windows
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Checksums
        shell: bash
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
