name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-linux:
    name: build linux-amd64 (CGO)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'
          cache: true

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build (CGO enabled)
        shell: bash
        run: |
          mkdir -p dist
          VERSION="${GITHUB_REF_NAME:-dev}"
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_linux_amd64" ./cmd/f2p
          # package tar.gz with LICENSE and README
          BASE="f2p_${VERSION}_linux_amd64"
          mkdir -p "dist/${BASE}"
          mv "dist/f2p_${VERSION}_linux_amd64" "dist/${BASE}/f2p"
          cp LICENSE README.md "dist/${BASE}/" 2>/dev/null || true
          tar -C dist -czf "dist/${BASE}.tar.gz" "${BASE}"
          rm -rf "dist/${BASE}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: f2p_linux_amd64
          path: |
            dist/*.tar.gz
          if-no-files-found: error

  build-linux-arm64:
    name: build linux-arm64 (CGO)
    runs-on: ubuntu-22.04-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'
          cache: true

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build (CGO enabled)
        shell: bash
        run: |
          mkdir -p dist
          VERSION="${GITHUB_REF_NAME:-dev}"
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_linux_arm64" ./cmd/f2p
          # package tar.gz with LICENSE and README
          BASE="f2p_${VERSION}_linux_arm64"
          mkdir -p "dist/${BASE}"
          mv "dist/f2p_${VERSION}_linux_arm64" "dist/${BASE}/f2p"
          cp LICENSE README.md "dist/${BASE}/"
          tar -C dist -czf "dist/${BASE}.tar.gz" "${BASE}"
          rm -rf "dist/${BASE}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: f2p_linux_arm64
          path: |
            dist/*.tar.gz
          if-no-files-found: error

  build-windows:
    name: build windows-amd64 (CGO)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'
          cache: true

      - name: Install MSYS2 and mingw-w64
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc

      - name: Add mingw64 to PATH
        shell: bash
        run: echo "C:/msys64/mingw64/bin" >> "$GITHUB_PATH"

      - name: Build (CGO enabled)
        shell: bash
        run: |
          mkdir -p dist
          VERSION="${GITHUB_REF_NAME:-dev}"
          CC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 GOOS=windows GOARCH=amd64 \
            go build -ldflags="-s -w" -o "dist/f2p_${VERSION}_windows_amd64.exe" ./cmd/f2p

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: f2p_windows_amd64
          path: dist/*
          if-no-files-found: error

  release:
    name: publish release
    needs:
      - build-linux
      - build-linux-arm64
      - build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Checksums
        shell: bash
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
